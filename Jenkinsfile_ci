pipeline {
agent any

stages {
    stage ('Git Checkout') {
        steps{
            checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/feature_gunjanm']], extensions: [], userRemoteConfigs: [[credentialsId: 'ibt', url: 'https://github.com/IBT-learning/ibt-maven.git']])
        }
    }
    stage ('Validate'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn validate'
            }
        }
    }
    stage ('Compile'){
            steps{
                withMaven(maven: 'maven_3.8') {
                    sh 'mvn compile'
                }
            }
        }
      stage ('Run Test'){
                 steps{
                     withMaven(maven: 'maven_3.8') {
                         sh 'mvn test'
                     }
                 }
             }
       stage('SonarQube Analysis') {
       environment{
        sonarScan = tool 'ibt-sonarqube'
       }
        steps{
           withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
             sh "$sonarScan/bin/sonar-scanner"
           }
         }
        }
        stage ('Package'){
                         steps{
                             withMaven(maven: 'maven_3.8') {
                                 sh 'mvn package'
                             }
                         }
                     }
           stage('Vulnerability scan - Dependency Check')
                {
                     steps{
                              dependencyCheck additionalArguments: '''
                                                                    -o "./"
                                                                    -s "./"
                                                                    -f "ALL"
                                                                    --prettyPrint ''', odcInstallation: 'dependency-check'
                                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                     }
                }
            stage('upload to Artifactory'){
                steps{
                    withCredentials([file(credentialsId: 'mvn-settings-artifactory-feb', variable: 'mvn_settings')]) {
                        withMaven(maven: 'maven_3.8') {
                                                         sh 'mvn deploy -s $mvn_settings'
                                                     }
                    }
                }
            }
            stage('upload to Artifactory - configFlie'){
                steps{
                    configFileProvider([configFile(fileId: 'jfrog-mvn-settings', targetLocation: 'mvn_settings_config', variable: 'mvn_settings_config')]) {
                        withMaven(maven: 'maven_3.8') {
                                sh 'mvn deploy -s $mvn_settings_config'
                        }
                    }
                }
            }
            stage('Deploy to Dev'){
                            steps{
                                script{
                                    def remote = [name: 'dev-server', host: '178.128.228.15', allowAnyHosts: true]
                                    withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'username')]) {
                                       remote.user =  username
                                       remote.password = password
                                       sshPut remote: remote, from: 'target/ibt-maven-3.1-SNAPSHOT.jar', into: '/opt/tomcat/apps'
                                    }
                                }
                            }
                        }
    }
}
